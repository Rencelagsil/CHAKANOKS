<?= $this->include('shared/header') ?>

<div class="main-container">
  <button class="btn btn-primary d-md-none position-fixed top-0 start-0 m-3" style="z-index:1100" data-bs-toggle="offcanvas" data-bs-target="#sidebar"><i class="bi bi-list"></i></button>
  <div id="mobileOverlay" class="d-md-none" onclick="closeSidebar()"></div>

  <?= $this->include('shared/sidebar') ?>

  <main class="main-content">
    <div class="header">
      <div>
        <h2>Inventory Reports</h2>
        <p class="mb-0">Generate comprehensive inventory reports with export options</p>
      </div>
      <div>
        <button class="btn btn-primary" onclick="generateReport()">
          <i class="bi bi-file-earmark-text"></i> Generate Report
        </button>
      </div>
    </div>

    <!-- Report Types -->
    <div class="row g-3 mb-4">
      <div class="col-md-3">
        <div class="action-btn h-100" onclick="showReportModal('stock')">
          <h5 class="mb-2"><i class="bi bi-boxes text-warning"></i></h5>
          <h6>Stock Level Report</h6>
          <p class="small mb-0">Current stock levels and alerts</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="action-btn h-100" onclick="showReportModal('low_stock')">
          <h5 class="mb-2"><i class="bi bi-exclamation-triangle text-warning"></i></h5>
          <h6>Low Stock Report</h6>
          <p class="small mb-0">Items below minimum levels</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="action-btn h-100" onclick="showReportModal('expiry')">
          <h5 class="mb-2"><i class="bi bi-calendar-x text-warning"></i></h5>
          <h6>Expiry Report</h6>
          <p class="small mb-0">Items nearing expiration</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="action-btn h-100" onclick="showReportModal('damage')">
          <h5 class="mb-2"><i class="bi bi-shield-x text-warning"></i></h5>
          <h6>Damage Report</h6>
          <p class="small mb-0">Damaged and expired items</p>
        </div>
      </div>
    </div>

    <!-- Recent Reports -->
    <div class="custom-card">
      <h5 class="text-warning mb-3">Recent Reports</h5>
      <div class="table-responsive">
        <table class="table table-dark table-hover">
          <thead>
            <tr>
              <th>Report Type</th>
              <th>Generated Date</th>
              <th>Generated By</th>
              <th>Records</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="reportsTable">
            <!-- Dynamic content -->
          </tbody>
        </table>
      </div>
    </div>
  </main>
</div>

<!-- Generate Report Modal -->
<div class="modal fade" id="reportModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content bg-dark text-white">
      <div class="modal-header border-warning">
        <h5 class="modal-title text-warning" id="reportModalTitle">Generate Report</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="reportForm">
          <input type="hidden" id="reportType">
          <div class="row g-3">
            <div class="col-md-6">
              <label class="form-label text-warning">Date Range</label>
              <select class="form-select bg-dark text-white border-warning" id="dateRange">
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="quarter">This Quarter</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
            <div class="col-md-6">
              <label class="form-label text-warning">Export Format</label>
              <select class="form-select bg-dark text-white border-warning" id="exportFormat">
                <option value="csv">CSV</option>
                <option value="pdf">PDF</option>
                <option value="excel">Excel</option>
              </select>
            </div>
            <div class="col-md-6" id="startDateDiv" style="display: none;">
              <label class="form-label text-warning">Start Date</label>
              <input type="date" class="form-control bg-dark text-white border-warning" id="startDate">
            </div>
            <div class="col-md-6" id="endDateDiv" style="display: none;">
              <label class="form-label text-warning">End Date</label>
              <input type="date" class="form-control bg-dark text-white border-warning" id="endDate">
            </div>
            <div class="col-12">
              <label class="form-label text-warning">Filters</label>
              <div id="reportFilters">
                <!-- Dynamic filters based on report type -->
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer border-warning">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="generateSelectedReport()">Generate & Download</button>
      </div>
    </div>
  </div>
</div>

<script>
// Reports data will be loaded from database
let recentReports = [];

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
  fetchRecentReports();
  
  // Event listeners
  document.getElementById('dateRange').addEventListener('change', toggleCustomDates);
});

async function fetchRecentReports() {
  try {
    const response = await fetch('/inventory/api/recent-reports');
    if (response.ok) {
      recentReports = await response.json();
      loadRecentReports();
    } else {
      showAlert('Failed to load reports', 'danger');
    }
  } catch (error) {
    console.error('Error fetching reports:', error);
    showAlert('Error loading reports', 'danger');
  }
}

function loadRecentReports() {
  const tbody = document.getElementById('reportsTable');
  tbody.innerHTML = '';
  
  recentReports.forEach(report => {
    const row = `
      <tr>
        <td><strong>${report.report_name}</strong></td>
        <td>${formatDateTime(report.created_at)}</td>
        <td>${report.generated_by_name || 'Unknown'}</td>
        <td>${report.records_count} records</td>
        <td>
          <button class="btn btn-sm btn-outline-primary me-1" onclick="downloadReport('${report.file_path}')" title="Download">
            <i class="bi bi-download"></i>
          </button>
          <button class="btn btn-sm btn-outline-info" onclick="viewReport('${report.file_path}')" title="View">
            <i class="bi bi-eye"></i>
          </button>
        </td>
      </tr>
    `;
    tbody.innerHTML += row;
  });
}

function showReportModal(type) {
  const modal = new bootstrap.Modal(document.getElementById('reportModal'));
  document.getElementById('reportType').value = type;
  
  const titles = {
    stock: 'Stock Level Report',
    low_stock: 'Low Stock Report',
    expiry: 'Expiry Report',
    damage: 'Damage Report'
  };
  
  document.getElementById('reportModalTitle').textContent = titles[type];
  setupReportFilters(type);
  modal.show();
}

function setupReportFilters(type) {
  const filtersDiv = document.getElementById('reportFilters');
  
  const commonFilters = `
    <div class="row g-2">
      <div class="col-md-6">
        <select class="form-select bg-dark text-white border-warning" id="categoryFilter">
          <option value="">All Categories</option>
          <option value="electronics">Electronics</option>
          <option value="clothing">Clothing</option>
          <option value="food">Food & Beverages</option>
        </select>
      </div>
      <div class="col-md-6">
        <input type="text" class="form-control bg-dark text-white border-warning" 
               placeholder="Product search..." id="productFilter">
      </div>
    </div>
  `;
  
  switch(type) {
    case 'stock':
      filtersDiv.innerHTML = commonFilters + `
        <div class="row g-2 mt-2">
          <div class="col-md-6">
            <select class="form-select bg-dark text-white border-warning" id="stockStatus">
              <option value="">All Stock Status</option>
              <option value="normal">Normal</option>
              <option value="low">Low Stock</option>
              <option value="critical">Critical</option>
              <option value="out">Out of Stock</option>
            </select>
          </div>
        </div>
      `;
      break;
    case 'low_stock':
      filtersDiv.innerHTML = commonFilters + `
        <div class="row g-2 mt-2">
          <div class="col-md-6">
            <input type="number" class="form-control bg-dark text-white border-warning" 
                   placeholder="Minimum threshold" id="thresholdFilter">
          </div>
        </div>
      `;
      break;
    case 'expiry':
      filtersDiv.innerHTML = commonFilters + `
        <div class="row g-2 mt-2">
          <div class="col-md-6">
            <select class="form-select bg-dark text-white border-warning" id="expiryPeriod">
              <option value="7">Next 7 days</option>
              <option value="30">Next 30 days</option>
              <option value="90">Next 90 days</option>
            </select>
          </div>
        </div>
      `;
      break;
    case 'damage':
      filtersDiv.innerHTML = commonFilters + `
        <div class="row g-2 mt-2">
          <div class="col-md-6">
            <select class="form-select bg-dark text-white border-warning" id="damageType">
              <option value="">All Types</option>
              <option value="damaged">Damaged</option>
              <option value="expired">Expired</option>
              <option value="defective">Defective</option>
            </select>
          </div>
        </div>
      `;
      break;
  }
}

function toggleCustomDates() {
  const dateRange = document.getElementById('dateRange').value;
  const startDiv = document.getElementById('startDateDiv');
  const endDiv = document.getElementById('endDateDiv');
  
  if (dateRange === 'custom') {
    startDiv.style.display = 'block';
    endDiv.style.display = 'block';
  } else {
    startDiv.style.display = 'none';
    endDiv.style.display = 'none';
  }
}

async function generateSelectedReport() {
  const reportType = document.getElementById('reportType').value;
  const dateRange = document.getElementById('dateRange').value;
  const exportFormat = document.getElementById('exportFormat').value;
  const startDate = document.getElementById('startDate').value;
  const endDate = document.getElementById('endDate').value;
  
  const reportData = {
    report_type: reportType,
    report_name: document.getElementById('reportModalTitle').textContent,
    date_range_start: dateRange === 'custom' ? startDate : null,
    date_range_end: dateRange === 'custom' ? endDate : null,
    export_format: exportFormat,
    filters: {
      date_range: dateRange,
      category: document.getElementById('categoryFilter')?.value || '',
      product: document.getElementById('productFilter')?.value || ''
    }
  };
  
  try {
    const response = await fetch('/inventory/api/generate-report', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(reportData)
    });
    
    const result = await response.json();
    
    if (result.success) {
      // Download the report
      if (exportFormat === 'csv') {
        downloadCSV(convertToCSV(result.data, reportType), `${reportType}_report_${new Date().toISOString().split('T')[0]}.csv`);
      } else if (exportFormat === 'pdf') {
        generatePDF(result.data, reportType, `${reportType}_report_${new Date().toISOString().split('T')[0]}.pdf`);
      } else if (exportFormat === 'excel') {
        downloadExcel(result.data, reportType, `${reportType}_report_${new Date().toISOString().split('T')[0]}.xlsx`);
      }
      
      await fetchRecentReports(); // Reload reports from database
      bootstrap.Modal.getInstance(document.getElementById('reportModal')).hide();
      showAlert('Report generated successfully!', 'success');
    } else {
      showAlert('Error generating report: ' + (result.errors || 'Unknown error'), 'danger');
    }
  } catch (error) {
    console.error('Error generating report:', error);
    showAlert('Error generating report', 'danger');
  }
}

function generateReportData(type) {
  // Sample data generation based on report type
  switch(type) {
    case 'stock':
      return [
        { product: 'Samsung Galaxy S23', category: 'Electronics', current_stock: 15, min_level: 5, status: 'Normal' },
        { product: 'Nike Air Max', category: 'Clothing', current_stock: 3, min_level: 10, status: 'Low Stock' }
      ];
    case 'low_stock':
      return [
        { product: 'Nike Air Max', category: 'Clothing', current_stock: 3, min_level: 10, shortage: 7 },
        { product: 'Coca Cola 1.5L', category: 'Food', current_stock: 0, min_level: 20, shortage: 20 }
      ];
    case 'expiry':
      return [
        { product: 'Milk 1L', category: 'Food', expiry_date: '2025-09-15', days_remaining: 7, current_stock: 24 }
      ];
    case 'damage':
      return [
        { product: 'Samsung Galaxy S23', type: 'Damaged', quantity: 2, value: 90000, date: '2025-09-07' },
        { product: 'Coca Cola 1.5L', type: 'Expired', quantity: 24, value: 2040, date: '2025-09-06' }
      ];
    default:
      return [];
  }
}

function convertToCSV(data, reportType) {
  if (!data.length) return '';
  
  const headers = Object.keys(data[0]);
  const rows = data.map(item => headers.map(header => item[header]));
  
  return [headers, ...rows].map(row => row.join(',')).join('\n');
}

function generatePDF(data, reportType, filename) {
  // Simulate PDF generation
  showAlert('PDF generation feature coming soon!', 'info');
}

function downloadExcel(data, reportType, filename) {
  // Simulate Excel generation
  showAlert('Excel generation feature coming soon!', 'info');
}

function downloadCSV(csv, filename) {
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.setAttribute('hidden', '');
  a.setAttribute('href', url);
  a.setAttribute('download', filename);
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
}

function downloadReport(filename) {
  showAlert(`Downloading ${filename}...`, 'info');
}

function viewReport(filename) {
  showAlert(`Viewing ${filename}...`, 'info');
}

function formatDateTime(dateString) {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function showAlert(message, type) {
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
  alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
  alertDiv.innerHTML = `
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  document.body.appendChild(alertDiv);
  
  setTimeout(() => {
    if (alertDiv.parentNode) {
      alertDiv.parentNode.removeChild(alertDiv);
    }
  }, 5000);
}
</script>

<?= $this->include('shared/footer') ?>


