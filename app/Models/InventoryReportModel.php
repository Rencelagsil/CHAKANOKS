<?php

namespace App\Models;

use CodeIgniter\Model;

class InventoryReportModel extends Model
{
    protected $table = 'inventory_reports';
    protected $primaryKey = 'id';
    protected $useAutoIncrement = true;
    protected $returnType = 'array';
    protected $useSoftDeletes = false;
    protected $protectFields = true;
    protected $allowedFields = [
        'report_type',
        'report_name',
        'branch_id',
        'date_range_start',
        'date_range_end',
        'filters',
        'export_format',
        'file_path',
        'records_count',
        'generated_by'
    ];

    // Dates
    protected $useTimestamps = true;
    protected $dateFormat = 'datetime';
    protected $createdField = 'created_at';
    protected $updatedField = 'updated_at';

    // Validation
    protected $validationRules = [
        'report_type' => 'required|in_list[stock_level,low_stock,expiry,damage,movement,valuation]',
        'report_name' => 'required|max_length[255]',
        'branch_id' => 'required|integer',
        'export_format' => 'in_list[csv,pdf,excel]',
        'generated_by' => 'required|integer'
    ];

    protected $validationMessages = [
        'report_type' => [
            'required' => 'Report type is required',
            'in_list' => 'Invalid report type'
        ],
        'report_name' => [
            'required' => 'Report name is required',
            'max_length' => 'Report name cannot exceed 255 characters'
        ],
        'branch_id' => [
            'required' => 'Branch ID is required',
            'integer' => 'Branch ID must be an integer'
        ],
        'generated_by' => [
            'required' => 'Generated by user ID is required',
            'integer' => 'User ID must be an integer'
        ]
    ];

    protected $skipValidation = false;
    protected $cleanValidationRules = true;

    // Callbacks
    protected $allowCallbacks = true;
    protected $beforeInsert = [];
    protected $afterInsert = [];
    protected $beforeUpdate = [];
    protected $afterUpdate = [];
    protected $beforeFind = [];
    protected $afterFind = [];
    protected $beforeDelete = [];
    protected $afterDelete = [];

    /**
     * Get reports by type
     */
    public function getReportsByType($type, $branchId = null)
    {
        $builder = $this->where('report_type', $type);
        
        if ($branchId) {
            $builder->where('branch_id', $branchId);
        }
        
        return $builder->orderBy('created_at', 'DESC')->findAll();
    }

    /**
     * Get recent reports
     */
    public function getRecentReports($limit = 10, $branchId = null)
    {
        $builder = $this->select('inventory_reports.*, users.username as generated_by_name')
                       ->join('users', 'users.id = inventory_reports.generated_by', 'left');
        
        if ($branchId) {
            $builder->where('inventory_reports.branch_id', $branchId);
        }
        
        return $builder->orderBy('inventory_reports.created_at', 'DESC')
                      ->limit($limit)
                      ->findAll();
    }

    /**
     * Get reports by date range
     */
    public function getReportsByDateRange($startDate, $endDate, $branchId = null)
    {
        $builder = $this->where('created_at >=', $startDate)
                       ->where('created_at <=', $endDate);
        
        if ($branchId) {
            $builder->where('branch_id', $branchId);
        }
        
        return $builder->orderBy('created_at', 'DESC')->findAll();
    }
}
